# 2. Select relevant columns
select(pinx, city, sqft, land_val, imp_val, view, condition)
library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select relevant columns
Seattle_homes <- kingco_homes %>%
select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
# 3. Filter for properties in a few major cities
homes_filtered <- homes_subset %>%
filter(city %in% c("SEATTLE", "BELLEVUE", "REDMOND"))
library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select relevant columns
Seattle_homes <- kingco_homes %>%
select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
# 3. Filter for properties in a few major cities
#homes_filtered <- homes_subset %>%
# filter(city %in% c("SEATTLE", "BELLEVUE", "REDMOND"))
# 4. Create new variables with mutate()
homes_transformed <- homes_filtered %>%
mutate(
total_val = land_val + imp_val,
val_per_sqft = total_val / sqft,
size_cat = case_when(
sqft < 1500 ~ "Small",
sqft < 3000 ~ "Medium",
TRUE ~ "Large"
)
)
library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select relevant columns
Bellveue_homes <- kingco_homes %>%
select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
# 3. Filter for properties in a few major cities
#homes_filtered <- homes_subset %>%
# filter(city %in% c("SEATTLE", "BELLEVUE", "REDMOND"))
# 4. Create new variables with mutate()
homes_transformed <- homes_filtered %>%
mutate(
total_val = land_val + imp_val,
val_per_sqft = total_val / sqft,
size_cat = case_when(
sqft < 1500 ~ "Small",
sqft < 3000 ~ "Medium",
TRUE ~ "Large"
)
)
library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select relevant columns
Bellveue_homes <- kingco_homes %>%
select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
library('tidyverse')
#devtools::install_github('andykrause/kingCoData') # You only need to run the installation once
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(50)
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select Columns pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm and filter them by Kirkland
Kirkland_homes <- kingco_homes %>%
select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
filter(city == "Kirkland")
# TODO - Data Transformation and Tagging Sheet
# Selecting columns and fiter for Bellevue
bellevue_homes <- kingco_homes %>%
select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
filter(city == "BELLEVUE")
# Add new variable called total_val
bellevue_homes <- bellevue_homes %>%
mutate(total_val = land_val + imp_val)
# Sort dataframe based on total_val
bellevue_homes %>%
arrange(desc(total_val)) %>%
head(10)
# Mean and Variance from properties in Bellevue
bellevue_summary <- bellevue_homes %>%
summarize(
mean_total_val = mean(total_val, na.rm = TRUE),
var_total_val = var(total_val, na.rm = TRUE)
)
bellevue_summary
# Mean and Variance from properties with the view to both Lakes in Bellevue
bellevue_lakes <- bellevue_homes %>%
filter(view_lakewash == 1 & view_lakesamm == 1) %>%
summarize(
mean_total_val = mean(total_val, na.rm = TRUE),
var_total_val = var(total_val, na.rm = TRUE)
)
bellevue_lakes
# Diff in Average and Variance
diff_mean <- bellevue_lakes$mean_total_val - bellevue_summary$mean_total_val
diff_var <- bellevue_lakes$var_total_val - bellevue_summary$var_total_val
cat("Difference in mean total value:", round(diff_mean, 2), "\n")
cat("Difference in variance of total value:", round(diff_var, 2))
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select Columns pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm and filter them by Kirkland
Kirkland_homes <- kingco_homes %>%
select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
filter(city == "Kirkland")
# 3. Arrange and Describe Date
Kirkland_homes %>%
arrange(desc(land_val)) %>%
head(10)
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select Columns pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm and filter them by Kirkland
Kirkland_homes <- kingco_homes %>%
select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
filter(city == "Kirkland")
# 3. Sort by
summarize(
avg_total_val_per_sqft = mean(total_val_per_sqft, na.rm = TRUE),
property_count = n()
) %>%
# 4. Arrange and Describe Data
Kirkland_homes %>%
arrange(desc(land_val)) %>%
head(10)
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# library(dplyr)
# 1. Set a random seed for reproducibility
#set.seed(50)
# 2. Select Columns pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm and filter them by Kirkland
#Kirkland_homes <- kingco_homes %>%
# select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
# filter(city == "Kirkland")
# 3. Arrange and Describe Data
#Kirkland_homes %>%
# arrange(desc(land_val)) %>%
# head(10)
library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(123)
# 2. Select relevant columns
homes_subset <- kingco_homes_clean %>%
select(pinx, city, sqft, land_val, imp_val, view, condition)
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# library(dplyr)
# 1. Set a random seed for reproducibility
#set.seed(50)
# 2. Select Columns pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm and filter them by Kirkland
#Kirkland_homes <- kingco_homes %>%
# select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
# filter(city == "Kirkland")
# 3. Arrange and Describe Data
#Kirkland_homes %>%
# arrange(desc(land_val)) %>%
# head(10)
library(dplyr)
# 1. Set a random seed for reproducibility
set.seed(123)
# 2. Select relevant columns
Kirkland_subset <- kingco_homes_clean %>%
select(pinx, city, sqft, land_val, imp_val, view, condition)
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# library(dplyr)
# 1. Set a random seed for reproducibility
#set.seed(50)
# 2. Select Columns pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm and filter them by Kirkland
#Kirkland_homes <- kingco_homes %>%
# select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
# filter(city == "Kirkland")
# 3. Arrange and Describe Data
#Kirkland_homes %>%
# arrange(desc(land_val)) %>%
# head(10)
# 1. Set a random seed for reproducibility
set.seed(123)
# 2. Select relevant columns
Kirkland_subset <- kingco_homes_clean %>%
select(pinx, city, sqft, land_val, imp_val, condition)
# 3. Filter for properties in a few major cities
homes_filtered <- homes_subset %>%
filter(city %in% c("SEATTLE", "BELLEVUE", "REDMOND"))
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# library(dplyr)
# 1. Set a random seed for reproducibility
#set.seed(50)
# 2. Select Columns pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm and filter them by Kirkland
#Kirkland_homes <- kingco_homes %>%
# select(pinx, city, land_val, imp_val, sqft, view_lakewash, view_lakesamm) %>%
# filter(city == "Kirkland")
# 3. Arrange and Describe Data
#Kirkland_homes %>%
# arrange(desc(land_val)) %>%
# head(10)
# 1. Set a random seed for reproducibility
set.seed(123)
# 2. Select relevant columns
Kirkland_subset <- kingco_homes_clean %>%
select(pinx, city, sqft, land_val, imp_val, condition)
# 3. Filter for properties in a few major cities
homes_filtered <- Kirkland_subset %>%
filter(city %in% c("SEATTLE", "BELLEVUE", "REDMOND"))
# 4. Create new variables with mutate()
homes_transformed <- homes_filtered %>%
mutate(
total_val = land_val + imp_val,
val_per_sqft = total_val / sqft,
size_cat = case_when(
sqft < 1500 ~ "Small",
sqft < 3000 ~ "Medium",
TRUE ~ "Large"
)
)
# 5. Recode condition into descriptive categories
homes_transformed <- homes_transformed %>%
mutate(
condition_desc = recode(condition,
"1" = "Poor",
"2" = "Fair",
"3" = "Average",
"4" = "Good",
"5" = "Excellent")
)
# 6. Rename columns for readability
homes_renamed <- homes_transformed %>%
rename(city_name = city, total_value = total_val)
# 7. Take a random sample of 500 homes for a quick look
homes_sample <- homes_renamed %>%
sample_n(500)
# 8. Summarize by city and size category
city_summary <- homes_renamed %>%
group_by(city_name, size_cat) %>%
summarize(
mean_val_per_sqft = mean(val_per_sqft, na.rm = TRUE),
median_val_per_sqft = median(val_per_sqft, na.rm = TRUE),
count = n()
) %>%
arrange(desc(mean_val_per_sqft))
# 9. Get the most expensive home in each city
top_home <- homes_renamed %>%
group_by(city_name) %>%
slice_max(order_by = total_value, n = 1) %>%
select(city_name, pinx, sqft, total_value, condition_desc)
# 10. Quick descriptive summary
summary(homes_renamed$val_per_sqft)
# Display results
city_summary
top_home
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select relevant columns
House_subset <- kingco_homes_clean %>%
select(pinx, city, sqft, land_val, imp_val, condition)
# 3. Filter for properties in a few major cities
homes_filtered <- House_subset %>%
filter(city %in% c("SEATTLE", "BELLEVUE", "REDMOND"))
# 4. Create new variables with mutate()
homes_transformed <- homes_filtered %>%
mutate(
total_val = land_val + imp_val,
val_per_sqft = total_val / sqft,
size_cat = case_when(
sqft < 1500 ~ "Small",
sqft < 3000 ~ "Medium",
TRUE ~ "Large"
)
)
# 5. Recode condition into descriptive categories
homes_transformed <- homes_transformed %>%
mutate(
condition_desc = recode(condition,
"1" = "Poor",
"2" = "Fair",
"3" = "Average",
"4" = "Good",
"5" = "Excellent")
)
# 6. Rename columns for readability
homes_renamed <- homes_transformed %>%
rename(city_name = city, total_value = total_val)
# 7. Take a random sample of 500 homes for a quick look
homes_sample <- homes_renamed %>%
sample_n(500)
# 8. Summarize by city and size category
city_summary <- homes_renamed %>%
group_by(city_name, size_cat) %>%
summarize(
mean_val_per_sqft = mean(val_per_sqft, na.rm = TRUE),
median_val_per_sqft = median(val_per_sqft, na.rm = TRUE),
count = n()
) %>%
arrange(desc(mean_val_per_sqft))
# 9. Get the most expensive home in each city
top_home <- homes_renamed %>%
group_by(city_name) %>%
slice_max(order_by = total_value, n = 1) %>%
select(city_name, pinx, sqft, total_value, condition_desc)
# 10. Quick descriptive summary
summary(homes_renamed$val_per_sqft)
# Display results
city_summary
top_home
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select relevant columns
House_subset <- kingco_homes_clean %>%
select(pinx, city, sqft, land_val, imp_val, condition)
# 3. Filter for properties in a few major cities
house_filtered <- House_subset %>%
filter(city %in% c("SEATTLE", "BELLEVUE", "REDMOND"))
# 4. Create new variables with mutate()
house_transformed <- house_filtered %>%
mutate(
total_val = land_val + imp_val,
val_per_sqft = total_val / sqft,
size_cat = case_when(
sqft < 1500 ~ "Small",
sqft < 3000 ~ "Medium",
TRUE ~ "Large"
)
)
# 5. Recode condition into descriptive categories
house_transformed <- house_transformed %>%
mutate(
condition_desc = recode(condition,
"1" = "Poor",
"2" = "Fair",
"3" = "Average",
"4" = "Good",
"5" = "Excellent")
)
# 6. Rename columns for readability
house_renamed <- house_transformed %>%
rename(city_name = city, total_value = total_val)
# 7. Take a random sample of 500 homes for a quick look
house_sample <- house_renamed %>%
sample_n(500)
# 8. Summarize by city and size category
city_summary <- house_renamed %>%
group_by(city_name, size_cat) %>%
summarize(
mean_val_per_sqft = mean(val_per_sqft, na.rm = TRUE),
median_val_per_sqft = median(val_per_sqft, na.rm = TRUE),
count = n()
) %>%
arrange(desc(mean_val_per_sqft))
# 9. Get the most expensive home in each city
top_home <- house_renamed %>%
group_by(city_name) %>%
slice_max(order_by = total_value, n = 1) %>%
select(city_name, pinx, sqft, total_value, condition_desc)
# 10. Quick descriptive summary
summary(house_renamed$val_per_sqft)
# Display results
city_summary
top_home
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library('tidyverse')
library('ggplot2') # the major package for visualization in R
hvi <- read_csv("zillow_hvi_msa.csv")
hvi <- read_csv("zillow_hvi_msa.csv",
col_types = cols(
RegionName = col_character(),
StateName  = col_character(),
Region   = col_character(), # Census Bureau Regions
RegionID   = col_double(),
Popu2024   = col_number(),
.default   = col_double()   # for other columns
)
)
head(hvi, 3)
View(hvi)
View(hvi)
View(hvi)
hvi <- read_csv("zillow_hvi_msa.csv",
col_types = cols(
RegionName = col_character(),
StateName  = col_character(),
Region   = col_character(), # Census Bureau Regions
RegionID   = col_double(),
Popu2024   = col_number(),
.default   = col_double()   # for other columns
)
)
head(hvi, 3)
hvi <- read_csv("zillow_hvi_msa.csv",
col_types = cols(
RegionName = col_character(),
StateName  = col_character(),
Region   = col_character(), # Census Bureau Regions
RegionID   = col_double(),
Popu2024   = col_number(),
.default   = col_double()   # for other columns
)
)
head(hvi, 3)
head(hvi, 3)
hvi_tidy <- hvi %>%
pivot_longer( # using `pivot_longer` to reshape wide → long
cols = -c("RegionID", "RegionName", "Popu2024", "StateName", "Region"), # keep these 4 as identifier variables (don’t pivot them)
names_to = "Date",  # old column names (like "1/31/00") become a new column called Date
values_to = "HVI" # the cell values go into a new column called HVI
# values_drop_na = TRUE; default as FALSE; if TRUE, will remove rows with missing HVI.
) %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%y")
)
head(hvi_tidy,3)
hvi_tidy <- hvi %>%
pivot_longer( # using `pivot_longer` to reshape wide → long
cols = -c("RegionID", "RegionName", "Popu2024", "StateName", "Region"), # keep these 4 as identifier variables (don’t pivot them)
names_to = "Date",  # old column names (like "1/31/00") become a new column called Date
values_to = "HVI" # the cell values go into a new column called HVI
# values_drop_na = TRUE; default as FALSE; if TRUE, will remove rows with missing HVI.
) %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%y")
)
head(hvi_tidy,3)
hvi_wide <- hvi_tidy %>%
pivot_wider(
names_from = Date,   # expand `Date` to multiple rows
values_from = HVI    # extract`HVI` column to those new columns
)
head(hvi_wide, 3)
colSums(is.na(hvi_tidy))
knitr::opts_chunk$set(echo = TRUE)
library('tidyverse')
library('kingCoData') # load the data package
data(kingco_sales) # load the sale data
# 1. Set a random seed for reproducibility
set.seed(50)
# 2. Select relevant columns
House_subset <- kingco_homes_clean %>%
select(pinx, city, sqft, land_val, imp_val, condition)
# 3. Filter for properties in a few major cities
house_filtered <- House_subset %>%
filter(city %in% c("SEATTLE", "BELLEVUE", "REDMOND"))
# 4. Create new variables with mutate()
house_transformed <- house_filtered %>%
mutate(
total_val = land_val + imp_val,
val_per_sqft = total_val / sqft,
size_cat = case_when(
sqft < 1500 ~ "Small",
sqft < 3000 ~ "Medium",
TRUE ~ "Large"
)
)
# 5. Recode condition into descriptive categories
house_transformed <- house_transformed %>%
mutate(
condition_desc = recode(condition,
"1" = "Poor",
"2" = "Fair",
"3" = "Average",
"4" = "Good",
"5" = "Excellent")
)
# 6. Rename columns for readability
house_renamed <- house_transformed %>%
rename(city_name = city, total_value = total_val)
# 7. Take a random sample of 500 homes for a quick look
house_sample <- house_renamed %>%
sample_n(500)
# 8. Summarize by city and size category
city_summary <- house_renamed %>%
group_by(city_name, size_cat) %>%
summarize(
mean_val_per_sqft = mean(val_per_sqft, na.rm = TRUE),
median_val_per_sqft = median(val_per_sqft, na.rm = TRUE),
count = n()
) %>%
arrange(desc(mean_val_per_sqft))
# 9. Get the most expensive home in each city
top_home <- house_renamed %>%
group_by(city_name) %>%
slice_max(order_by = total_value, n = 1) %>%
select(city_name, pinx, sqft, total_value, condition_desc)
# 10. Quick descriptive summary
summary(house_renamed$val_per_sqft)
# Display results
city_summary
top_home
